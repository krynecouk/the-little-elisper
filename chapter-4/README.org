* 4. Numbers Games
** ~add1~
#+begin_src elisp
(defun add1 (n)
  (+ n 1))

(add1 67) ; 68
#+end_src

** ~sub1~
#+begin_src elisp
(defun sub1 (n)
  (- n 1))

(sub1 5) ; 4
#+end_src

** ~+~
#+begin_src elisp
(defun + (n m)
  (cond
   ((zerop m) n)
   (t
    (add1 (+ n (sub1 m))))))

(+ 4 6) ; 10
#+end_src

** ~-~
#+begin_src elisp
(defun - (n m)
  "It takes two numbers as arguments, and reduces the second
   until it hits zero. It subtracts one from the result as
   many times as it did to cause the second one to reach zero."
  (cond
   ((zerop m) n)
   (t
    (sub1 (- n (sub1 m))))))

    (- 17 9) ; 8
    #+end_src

** ~addtup~
#+begin_src elisp
(defun addtup (tup)
  (cond
   ((null tup) 0)
   (t
    (+ (car tup) (addtup (cdr tup))))))

(addtup '(15 6 7 12 3)) ; 43
#+end_src

** ~x~
#+begin_src elisp
(defun x (m n)
  (cond
   ((zerop n) 0)
   (t
    (+ m (x m (- n 1))))))

(x 12 3) ; 36
#+end_src

** ~tup+~
#+begin_src elisp
(defun tup+ (tup1 tup2)
  "It adds the first number of tup1 to the first number of tup2,
   then it adds the second number of tup1 to the second number
   of tup2, and so on, building a tup of the answers."
  (cond
   ((null tup1) tup2)
   ((null tup2) tup1)
   (t
    (cons (+ (car tup1) (car tup2))
          (tup+ (cdr tup1) (cdr tup2))))))

(tup+ '(3 6 9 11 4) '(8 5 2 0 7)) ; (11 11 11 11 11)
(tup+ '(3 7 8 1) '(4 6)) ; (7 13 8 1)
#+end_src

** ~gt~ (>)
#+begin_src elisp
(defun gt (m n)
  (cond
    ((zerop m) nil)
    ((zerop n) t)
    (t (gt (- m 1) (- n 1)))))

(gt 12 133) ; nil
(gt 120 11) ; t
(gt 3 3)    ; t
#+end_src

** ~lt~ (<)
#+begin_src elisp
(defun lt (m n)
  (cond
   ((zerop n) nil)
   ((zerop m) t)
   (t (lt (- m 1) (- n 1)))))

(lt 4 6) ; t
(lt 8 3) ; nil
(lt 6 6) ; t
#+end_src

** ~=~
#+begin_src elisp
(defun eq= (m n)
  (cond
   ((or (gt m n) (lt m n))
       nil)
   (t t)))

(eq= 2 3) ; nil
(eq= 3 2) ; nil
(eq= 5 5) ; t
#+end_src

** ~^~
#+begin_src elisp
(defun ^ (m n)
  (cond
   ((zerop n) 1)
   (t
    (* m (^ m (- n 1))))))

(^ 2 3)  ; 8
(^ 10 3) ; 1000
#+end_src

** ~div~
#+begin_src elisp
(defun div (m n)
  (cond
   ((< m n) 0)
    (t
     (+ 1 (div (- m n) n))))))

(div 15 3) ; 5
(div 15 4) ; 3
#+end_src

** ~length~
#+begin_src elisp
(defun len (lat)
  (cond
   ((null lat) 0)
   (t
    (+ 1 (len (cdr lat))))))

(len '("hotdogs" "with" "mustard" "sauerkraut" "and" "pickles")) ; 6
#+end_src

** ~pick~
#+begin_src elisp
(defun pick (n lat)
  (cond
   ((zerop (- n 1)) (car lat))
   (t
    (pick (- n 1) (cdr lat)))))

(pick 4 '("lasagna" "spaghetti" "ravioli" "macaroni" "meatball")) ; macaroni
#+end_src

** ~rempick~
#+begin_src elisp
(defun rempick (n lat)
  (cond
   ((zerop (- n 1)) (cdr lat))
   (t
    (cons (car lat) (rempick (- n 1) (cdr lat))))))

(rempick 3 '("hotdogs" "with" "hot" "mustard")) ; ("hotdogs" "with" "mustard")
#+end_src

** ~numberp~
#+begin_src elisp
(defun no-nums (lat)
  "Gives as a final value a lat obtained by removing all the numbers from the lat."
  (cond
   ((null lat) '())
   ((numberp (car lat))
    (no-nums (cdr lat)))
   (t (cons (car lat) (no-nums (cdr lat))))))

(no-nums '(5 "pears" 6 "prunes" 9 "dates")) ; ("pears" "prunes" "dates")
#+end_src

** ~allnums~
#+begin_src elisp
(defun all-nums (lat)
  (cond
   ((null lat) '())
   ((numberp (car lat))
    (cons (car lat) (all-nums (cdr lat))))
   (t (all-nums (cdr lat)))))

(all-nums '(5 "pears" 6 "prunes" 9 "dates")) ; (5 6 9)
#+end_src
