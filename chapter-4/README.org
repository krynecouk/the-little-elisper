* 4. Numbers Games
** ~add1~
#+begin_src elisp
(defun add1 (n)
  (+ n 1))

(add1 67) ; 68
#+end_src

** ~sub1~
#+begin_src elisp
(defun sub1 (n)
  (- n 1))

(sub1 5) ; 4
#+end_src

** ~+~
#+begin_src elisp
(defun + (n m)
  (cond
   ((zerop m) n)
   (t
    (add1 (+ n (sub1 m))))))

(+ 4 6) ; 10
#+end_src

** ~-~
#+begin_src elisp
(defun - (n m)
  "It takes two numbers as arguments, and reduces the second
   until it hits zero. It subtracts one from the result as
   many times as it did to cause the second one to reach zero."
  (cond
   ((zerop m) n)
   (t
    (sub1 (- n (sub1 m))))))

    (- 17 9) ; 8
    #+end_src

** ~addtup~
#+begin_src elisp
(defun addtup (tup)
  (cond
   ((null tup) 0)
   (t
    (+ (car tup) (addtup (cdr tup))))))

(addtup '(15 6 7 12 3)) ; 43
#+end_src

** ~x~
#+begin_src elisp
(defun x (m n)
  (cond
   ((zerop n) 0)
   (t
    (+ m (x m (- n 1))))))

(x 12 3) ; 36
#+end_src

