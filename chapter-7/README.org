* Friends and Relations
** ~set?~
#+begin_src elisp
(defun member? (a lat)
  (cond
   ((null lat) nil)
   ((equal a (car lat)) t)
   (t (member? a (cdr lat)))))

(defun set? (lat)
   (cond
      ((null lat) t)
      ((member? (car lat) (cdr lat)) nil)
      (t (set? (cdr lat)))))

(set? '("apple" "peaches" "apple" "plum")) ; nil
(set? '("apple" "peaches" "pears" "plum")) ; t
#+end_src
** ~makeset~
#+begin_src elisp
(defun makeset (lat)
  (cond
   ((null lat) '())
   ((member? (car lat) (cdr lat))
    (makeset (cdr lat)))
   (t
    (cons (car lat) (makeset (cdr lat))))))


(makeset '("apple" "peach" "pear" "peach" "plum" "apple" "lemon" "peach")) ; ("pear" "plum" "apple" "lemon" "peach")
#+end_src
** ~makeset2~
#+begin_src elisp
(defun multirember (a lat)
  (cond
   ((null lat) '())
   ((equal a (car lat))
    (multirember a (cdr lat)))
   (t
    (cons (car lat) (multirember a (cdr lat))))))

(multirember "cup" '("coffee" "cup" "tea" "cup" "and" "hick" "cup")) ; ("coffee" "tea" "and" "hick")

(defun makeset2 (lat)
  (cond
   ((null lat) '())
   (t
    (cons (car lat) (makeset2 (multirember (car lat) lat))))))

(makeset2 '("apple" "peach" "pear" "peach" "plum" "apple" "lemon" "peach")) ; ("pear" "plum" "apple" "lemon" "peach")
#+end_src
** ~subset?~
#+begin_src elisp
(defun member? (a lat)
  (cond
   ((or (null a) (null lat))
    nil)
   (t
    (or (equal a (car lat)) (member? a (cdr lat))))))

(member? "apple" '("orange" "peach" "apple" "banana"))

(defun subset? (set1 set2)
  (cond
   ((null set1) t)
   (t
    (and
     (member? (car set1) set2)
     (subset? (cdr set1) set2)))))

  (subset?
   '(5 "chicken" "wings")
   '(5 "hamburgers" 2 "pieces" "fried" "chicken" "and" "light" "duckling" "wings")) ; t

  (subset?
   '(4 "pounds" "of" "horseradish")
   '("four" "pounds" "chicken" "and" 5 "ounces" "horseradish")) ; f
#+end_src
