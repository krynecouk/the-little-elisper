* 3. Cons the Magnificent
** ~rember~
#+begin_src elisp
(defun rember (a lat)
  "It takes an atom and a lat as its arguments, and makes
   a new lat with the first occurrence of the atom in the
   old lat removed."
  (cond
   ((null lat)
    '())
   ((equal a (car lat))
    (cdr lat))
   (t
    (cons (car lat)
          (rember a (cdr lat))))))

(rember "cup" '("coffee" "cup" "tea" "cup")) ; ("coffee" "tea" "cup")
#+end_src

** ~firsts~
#+begin_src elisp
(defun firsts (l)
  "The function firsts takes one argument, a list, which
   is either a null list or contains only non-empty lists.
   It builds another list composed of the first sexp of
   each internal list."
  (cond
   ((or (null l) (null (car l)))
    '())
   (t
    (cons (car(car l)) (firsts (cdr l))))))

(firsts '(("apple" "peach" "pumpkin")
        ("plum" "pear" "cherry")
        ("grape" "raisin" "pea")
        ("bean" "carrot" "eggplant")))

; ("apple" "plum" "grape" "bean")

#+end_src

** ~insertR~
#+begin_src elisp
(defun insertR (new old lat)
  "It takes three arguments: the atoms new and old, and a lat.
   The function insertR builds a lat with new inserted to the
   right of the first occurrence of old."
  (cond
   ((null lat)
    '())
   ((equal (car lat) old)
    (cons (car lat) (cons new (cdr lat))))
   (t
    (cons (car lat) (insertR new old (cdr lat))))))

(insertR "e" "d" '("a" "b" "c" "d" "f" "g" "d" "h")) ; ("a" "b" "c" "d" "e" "f" "g" "d" "h")
#+end_src

** ~insertL~
#+begin_src elisp
(defun insertL (new old lat)
  "It takes three arguments: the atoms new and old, and a lat.
   The function insertL builds a lat with new inserted to the
   left of the first occurrence of old."
  (cond
   ((null lat)
    '())
   ((equal old (car lat))
    (cons new lat))
   (t
    (cons (car lat) (insertL new old (cdr lat))))))

(insertL "e" "d" '("a" "b" "c" "d" "f" "g" "d" "h")) ; ; ("a" "b" "c" "e" "d" "f" "g" "d" "h")

#+end_src

** ~subst~
#+begin_src elisp
(defun subst (new old lat)
  "Replaces the first occurrence of old in the lat with new."
  (cond
   ((null lat)
    '())
   ((equal old (car lat))
    (cons new (cdr lat)))
   (t
    (cons (car lat) (subst new old (cdr lat))))))

(subst "topping" "fudge" '("ice" "cream" "with" "fudge" "for" "dessert"))
; ("ice" "cream" "with" "topping" "for" "dessert")
#+end_src

** ~subst2~
#+begin_src elisp
(defun subst2 (new o1 o2 lat)
  "Replaces either the first occurrence of o1 or the first occurrence of o2 by new."
  (cond
   ((null lat)
    '())
   ((or (equal (car lat) o1) (equal (car lat) o2))
    (cons new (cdr lat)))
   (t
    (cons (car lat) (subst2 new o1 o2 (cdr lat))))))

(subst2 "vanilla" "chocolate" "banana" '("banana" "ice" "cream" "with" "chocolate" "topping"))
; ("vanilla" "ice" "cream" "with" "chocolate" "topping")
#+end_src
