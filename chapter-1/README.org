* 1. Toys
** atom
anything that is not a /cons/
#+begin_src elisp
  21
  "foo"
  [ 1 2 3 ]
#+end_src

** cons
object which holds two ordered values or pointers to the values
#+begin_src elisp
  (1 2 3)
  (list 1 2 3)
  '(1 . (2 . (3 . nil)))
  (cons 1 (cons 2 (cons 3 nil)))
  ;; *--*--*--nil
  ;; |  |  |
  ;; 1  2  3
#+end_src

** list
cons where the second argument is a list
#+begin_src elisp
  (1 2 3)
  (cons 1 '(2 3)) ; (1 2 3)
#+end_src

** pair
cons where the second argument is a /sexp/
#+begin_src elisp
  '(1 . 2)
  (cons 1 2)        ; (1 2)
  (cons '(1) 2)     ; ((1) . 2)
#+end_src

** sexp
atom or cons

** ~car~
first sexp from the non-empty cons
#+begin_src elisp
  (car '(1 2 3))    ; 1
  (car '(a . b))    ; a
  (car (cons 3 4))  ; 3
#+end_src
  
** ~cdr~
second sexp from the non-empty cons (always returns list)
#+begin_src elisp
  (cdr '(1 2 3))   ; (2 3)
  (cdr '(a . b))   ; b
#+end_src

** predicates
#+begin_src elisp
  (atom 1)     ; t
  (atom nil)   ; t
  (listp 1)    ; nil
  (listp '(1)) ; t
  (listp nil)  ; t
  (nlistp nil) ; nil
  (null nil)   ; t
  (null 1)     ; nil
  (proper-list-p '(a b c)) ; 3
#+end_src
