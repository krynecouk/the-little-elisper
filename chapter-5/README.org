* 5. *Oh My Gawd*: It's Full of Stars
** ~rember*~
#+begin_src elisp
(defun rember* (a lat)
  (cond
   ((null lat) '())
   ((atom (car lat))
    (cond
     ((equal a (car lat))
      (rember* a (cdr lat)))
     (t
      (cons
       (car lat)
       (rember* a (cdr lat))))))
   (t
    (cons
     (rember* a (car lat))
     (rember* a (cdr lat))))))

(rember* "cup" '(("coffee") "cup" (("tea") "cup") ("and" ("hick")) "cup"))
; (("coffee") (("tea")) ("and" ("hick")))
#+end_src

** ~insertR*~
#+begin_src elisp
(defun insertR* (new old l)
  (cond
   ((null l) '())
   ((atom (car l))
    (cond
     ((equal old (car l))
      (cons
       old
       (cons new (cdr l))))
     (t
      (cons
       (car l)
       (insertR* new old (cdr l))))))
   (t
    (cons
     (insertR* new old (car l))
     (insertR* new old (cdr l))))))

(insertR* "roast" "chuck"
          '(("how" "much" ("wood"))
            "could"
            (("a" ("wood") "chuck"))
            ((("chuck")))
            ("if" ("a") (("wood" "chuck")))
            "could" "chuck" "wood"))

; ((how much (wood))
; could
; ((a (wood) chuck roast))
; (((chuck roast)))
; (if (a) ((wood chuck roast)))
; could chuck roast wood)
#+end_src

** ~occur*~
#+begin_src elisp
(defun occur* (a l)
  (cond
   ((null l) 0)
   ((atom (car l))
    (cond
     ((equal a (car l))
      (+ 1 (occur* a (cdr l))))
     (t
      (occur* a (cdr l)))))
   (t
    (+ (occur* a (car l))
       (occur* a (cdr l))))))

(occur* "banana"
        '(("banana")
          ("split" (((("banana" "ice")))
                    ("cream" ("banana"))
                    "sherbet"))
          ("banana")
          ("bread")
          ("banana" "brandy")))
; 5
#+end_src

** ~subst*~
#+begin_src elisp
(defun subst* (new old l)
  (cond
   ((null l) '())
   ((atom (car l))
    (cond
     ((equal old (car l))
      (cons
       new
       (subst* new old (cdr l)))
      )
     (t
      (cons
       (car l)
       (subst* new old (cdr l))))))
   (t
    (cons
     (subst* new old (car l))
     (subst* new old (cdr l))))))

(subst*
 "orange"
 "banana"
 '(("banana")
   ("split" (((("banana" "ice")))
             ("cream" ("banana"))
             "sherbet"))
   ("banana")
   ("bread")
   ("banana" "brandy")))

; (("orange")
;  ("split" (((("orange" "ice")))
;            ("cream" ("orange"))
;            "sherbet"))
;  ("orange")
;  ("bread")
;  ("orange" "brandy")).
#+end_src

#+RESULTS:
| orange |                                             |
| split  | ((((orange ice))) (cream (orange)) sherbet) |
| orange |                                             |
| bread  |                                             |
| orange | brandy                                      |

** ~insertL*~
#+begin_src elisp
(defun insertL* (new old l)
  (cond
   ((null l) '())
   ((atom (car l))
    (cond
     ((equal old (car l))
      (cons new
            (cons old (insertL* new old (cdr l)))))
     (t
      (cons (car l)
            (insertL* new old (cdr l))))))
   (t
    (cons (insertL* new old (car l))
          (insertL* new old (cdr l))))))

(insertL* "pecker" "chuck"
          '(("how" "much" ("wood"))
            "could"
            (("a" ("wood") "chuck"))
            ((("chuck")))
            ("if" ("a") (("wood" "chuck")))
            "could" "chuck" "wood"))

; ((how much (wood))
;  could
;  ((a (wood) pecker chuck))
;  (((pecker chuck)))
;  (if (a) ((wood pecker chuck)))
;  could pecker chuck wood)
#+end_src

** ~member*~
#+begin_src elisp
(defun member* (a l)
  (cond
   ((null l) nil)
   ((atom (car l))
    (or (equal a (car l)) (member* a (cdr l))))
   (t
    (or (member* a (car l)) (member* a (cdr l))))))

(member* "chips" '(("potato") ("chips" (("with") "fish") ("chips")))) ; t
(member* "coffee" '(("potato") ("chips" (("with") "fish") ("chips")))) ; f
#+end_src
