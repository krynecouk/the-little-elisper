* 2. Do It, Do It Again, and Again, and Again ...
** ~lat?~
 #+begin_src elisp
 (defun lat? (l)
   "lat? looks at each S-expression in a list, in
   turn, and asks if each S-expression is an atom,
   until it runs out of S-expressions. If it runs
   out without encountering a list, the value is t.
   If it finds a list, the value is nil."
   (cond
    ((null l)
     't)
    ((atom (car l))
     (lat? (cdr l)))
    (t
     '())))

 (lat? '("bacon" "and" "eggs")) ; t
 (lat? '(1 (2 3)))              ; nil
 #+end_src

** ~member?~
#+begin_src elisp
(defun member? (a lat)
  "member? looks at each sexp in a list, in turn,
  and asks if each sexp is equal to atom a. If it
  runs out of sexp equal to a, the value is nil.
  If it finds a member of atom a in the list of
  atoms lat, the value is t."
  (cond
   ((null lat)
    nil)
   (t
    (or (equal (car lat) a)
        (member? a (cdr lat))))))

(member? "meat" '("mashed" "potatoes" "and" "meat" "gravy")) ; t
(member? "egg" '("mashed" "potatoes" "and" "meat" "gravy"))  ; nil
#+end_src
